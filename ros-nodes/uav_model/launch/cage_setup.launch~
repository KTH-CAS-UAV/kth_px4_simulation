<launch>
	<!-- launch other launch files and eat lunch-->

	<!-- launch mavros px4 -->
		<include file="$(find mavros)/launch/px4.launch">
                    <!--arg name="fcu_url" value="/dev/serial/by-id/usb-3D_Robotics_PX4_FMU_v4.x_0-if00:57600"/-->
                    <arg name="fcu_url" value="/dev/serial/by-id/usb-FTDI_TTL232R_FT97WS3V-if00-port0:921600"/>
                    <!--arg name="fcu_url" value="/dev/serial/by-id/usb-FTDI_TTL232R_FT97WS3V-if00-port0:57600"/-->
                </include>

	<!-- launch mavros optitrack node ?? -->
		<include file="$(find mocap_optitrack)/launch/mocap.launch">				
		</include>

	<!-- launch state publisher of rviz drone model -->
		<include file="$(find drone_model)/launch/state_publisher.launch"/>

	<!-- launch openni stuff -->
	<include file="$(find openni2_launch)/launch/openni2.launch">
		<arg name="depth_registration" value="true"/>
		<arg name="rgb_camera_info_url" value="file:///home/rpl/.ros/camera_info/rgb_PS1080_PrimeSense.yaml"/>
		<arg name="depth_camera_info_url" value="file:///home/rpl/.ros/camera_info/depth_PS1080_PrimeSense.yaml"/>
		<!--param name="depth_registration" value="true"/-->
	</include>

	<!-- launch tf tree -->
	<include file="$(find drone_model)/launch/tf_tree.launch"/>


	<node pkg="tf" type="static_transform_publisher" name="tf_mocap_camera" args="0.193 0.082 -0.256 0.026 0.649 0.014 mocap camera_link 10" />
	<node pkg="tf" type="static_transform_publisher" name="tf_world_slam_origin" args="0 0 0 0 0 0 world slam_origin 20" />

    <!-- map cloud node --> 
      <node name="map_as_pointcloude" pkg="map_as_pointcloude" type="map_as_pointcloude"/>
    <!-- remap camera for octomap with treottle-->
      <node name="throttle" pkg="topic_tools" type="throttle" args="/camera/depth/points 10 /map/cage_cloud" />
		

	<arg name="machine_name" default="$(optenv HOSTNAME localhost)"/>
	<group ns="$(arg machine_name)">
		<node name="cpu_monitor_$(arg machine_name)" pkg="system_monitor"
		      type="cpu_monitor.py" output="screen" respawn="true"/>
		<!--node name="hdd_monitor_$(arg machine_name)" pkg="system_monitor"
		      type="hdd_monitor.py" output="screen" respawn="true"/-->
		<node name="mem_monitor_$(arg machine_name)" pkg="system_monitor"
		      type="mem_monitor.py" output="screen" respawn="true"/>
		<!--node name="ntp_monitor_$(arg machine_name)" pkg="system_monitor"
		      type="ntp_monitor.py" output="screen" respawn="true"/-->
		<!--node name="net_monitor_$(arg machine_name)" pkg="system_monitor"
		      type="net_monitor.py" output="screen" respawn="true"/-->

		<rosparam command="load" file="$(find system_monitor)/config/system_monitor.yaml"/>
	</group>



<!-- Octomap Server -->
      <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
	    <param name="resolution" value="0.1" />

	  <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
	    <param name="frame_id" type="string" value="/world" />

	  <!-- maximum range to integrate (speedup!) -->
	    <param name="max_sensor_range" value="5.0" />

	  <!-- publish free space -->
	    <param name="publish_free_space" value="true" />

	  <!-- get rid of ground plane with NO filter-->
	    <param name="occupancy_min_z" value="0.2"/>
	    <param name="occupancy_max_z" value="2.8"/>

	    <param name="latch" value="false" />
	
	  <!-- data source to integrate (PointCloud2) -->
            <remap from="cloud_in" to="/map/cage_cloud" />


	  </node>

</launch>
